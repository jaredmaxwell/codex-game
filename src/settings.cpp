#include "settings.h"
#include <fstream>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <cctype>

Settings::Settings() {
    // Initialize with default values
    m_fullscreen = false;
    m_filename = "settings.txt";
}

Settings::~Settings() {
    // Auto-save on destruction
    saveToFile();
}

bool Settings::loadFromFile(const std::string& filename) {
    m_filename = filename;
    std::ifstream file(filename);
    
    if (!file.is_open()) {
        std::cout << "Settings file not found, using defaults" << std::endl;
        return false;
    }
    
    std::string line;
    while (std::getline(file, line)) {
        // Remove comments and empty lines
        size_t commentPos = line.find('#');
        if (commentPos != std::string::npos) {
            line = line.substr(0, commentPos);
        }
        line = trim(line);
        
        if (line.empty()) continue;
        
        // Parse key=value pairs
        size_t equalsPos = line.find('=');
        if (equalsPos != std::string::npos) {
            std::string key = trim(line.substr(0, equalsPos));
            std::string value = trim(line.substr(equalsPos + 1));
            
            if (key == "fullscreen") {
                m_fullscreen = parseBool(value);
                std::cout << "Loaded fullscreen setting: " << (m_fullscreen ? "true" : "false") << std::endl;
            }
        }
    }
    
    file.close();
    std::cout << "Settings loaded successfully from " << filename << std::endl;
    return true;
}

bool Settings::saveToFile(const std::string& filename) {
    if (!filename.empty()) {
        m_filename = filename;
    }
    
    std::ofstream file(m_filename);
    if (!file.is_open()) {
        std::cerr << "Failed to open settings file for writing: " << m_filename << std::endl;
        return false;
    }
    
    file << "# Game Settings" << std::endl;
    file << "# This file is automatically generated" << std::endl;
    file << std::endl;
    file << "fullscreen=" << (m_fullscreen ? "true" : "false") << std::endl;
    
    file.close();
    std::cout << "Settings saved to " << m_filename << std::endl;
    return true;
}

void Settings::resetToDefaults() {
    m_fullscreen = false;
    std::cout << "Settings reset to defaults" << std::endl;
}

std::string Settings::trim(const std::string& str) {
    size_t first = str.find_first_not_of(' ');
    if (first == std::string::npos) {
        return "";
    }
    size_t last = str.find_last_not_of(' ');
    return str.substr(first, (last - first + 1));
}

bool Settings::parseBool(const std::string& value) {
    std::string lowerValue = value;
    std::transform(lowerValue.begin(), lowerValue.end(), lowerValue.begin(), ::tolower);
    
    return (lowerValue == "true" || lowerValue == "1" || lowerValue == "yes" || lowerValue == "on");
}
