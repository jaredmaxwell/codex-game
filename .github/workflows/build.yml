name: Build Game

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-windows:
    runs-on: windows-latest  # Change to [self-hosted, windows, vcpkg] when self-hosted runner is ready
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Setup vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
    
    - name: Configure vcpkg binary caching
      run: |
        # Set up GitHub Packages as binary cache
        .\vcpkg\vcpkg.exe config default-provider=ghcr
        .\vcpkg\vcpkg.exe config --set-asset-sources=clear
        .\vcpkg\vcpkg.exe config --set-asset-sources=ghcr,readwrite
    
    - name: Install dependencies with caching
      run: |
        .\vcpkg\vcpkg.exe install --triplet=x64-windows
    
    - name: Build with CMake
      run: |
        cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows
        cmake --build build --config Release
        
    - name: Upload Windows build
      uses: actions/upload-artifact@v4
      with:
        name: game-windows
        path: build/Release/game.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install SDL2 dependencies
      run: |
        # Install SDL2 and basic dependencies
        brew install sdl2 libpng
        # Install zlib for PNG support
        brew install zlib
        # Check for libz.a in the correct keg-only location
        echo "Checking for libz.a in keg-only location:"
        if [ -f "$(brew --prefix zlib)/lib/libz.a" ]; then
          echo "✓ Found libz.a at $(brew --prefix zlib)/lib/libz.a"
        else
          echo "✗ libz.a not found at $(brew --prefix zlib)/lib/"
          echo "Contents of $(brew --prefix zlib)/lib/:"
          ls -la "$(brew --prefix zlib)/lib/" || echo "Directory does not exist"
        fi
        # Set environment variables for zlib (keg-only package)
        echo "ZLIB_PREFIX=$(brew --prefix zlib)" >> $GITHUB_ENV
        echo "ZLIB_LIB=$(brew --prefix zlib)/lib" >> $GITHUB_ENV
        echo "ZLIB_INCLUDE=$(brew --prefix zlib)/include" >> $GITHUB_ENV
        # Handle cmake installation (may be from different tap)
        if ! command -v cmake >/dev/null 2>&1; then
          echo "Installing cmake..."
          brew install cmake
        else
          echo "cmake already available, checking version..."
          cmake --version
        fi
        # If cmake installation fails due to tap conflict, try to resolve it
        if ! command -v cmake >/dev/null 2>&1; then
          echo "cmake not available, attempting to resolve tap conflict..."
          brew uninstall cmake 2>/dev/null || true
          brew install cmake
        fi
        
    - name: Build SDL2_image with PNG support only
      run: |
        echo "Building SDL2_image from source with PNG support only..."
        # Verify cmake is available
        if ! command -v cmake >/dev/null 2>&1; then
          echo "Error: cmake is not available. Cannot build SDL2_image."
          exit 1
        fi
        echo "cmake version: $(cmake --version | head -n1)"
        # Create custom installation directory
        export SDL2_IMAGE_PREFIX=/opt/sdl2_image_png
        sudo mkdir -p $SDL2_IMAGE_PREFIX
        
        # Download SDL2_image source
        cd /tmp
        curl -L https://github.com/libsdl-org/SDL_image/releases/download/release-2.8.2/SDL2_image-2.8.2.tar.gz -o SDL2_image-2.8.2.tar.gz
        tar -xzf SDL2_image-2.8.2.tar.gz
        cd SDL2_image-2.8.2
        
        # Configure with PNG support only
        mkdir build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$SDL2_IMAGE_PREFIX \
          -DCMAKE_PREFIX_PATH=$(brew --prefix) \
          -DBUILD_SHARED_LIBS=OFF \
          -DSUPPORT_PNG=ON \
          -DSUPPORT_JPG=OFF \
          -DSUPPORT_TIF=OFF \
          -DSUPPORT_WEBP=OFF \
          -DSUPPORT_AVIF=OFF \
          -DSUPPORT_JXL=OFF \
          -DSUPPORT_BMP=OFF \
          -DSUPPORT_GIF=OFF \
          -DSUPPORT_LBM=OFF \
          -DSUPPORT_PCX=OFF \
          -DSUPPORT_PNM=OFF \
          -DSUPPORT_SVG=OFF \
          -DSUPPORT_TGA=OFF \
          -DSUPPORT_XCF=OFF \
          -DSUPPORT_XPM=OFF \
          -DSUPPORT_XV=OFF \
          -DUSE_STBIMAGE=OFF \
          -DPNG_FOUND=ON \
          -DPNG_LIBRARIES=$(brew --prefix)/lib/libpng.a \
          -DPNG_INCLUDE_DIRS=$(brew --prefix)/include
        
        # Build and install
        echo "Building SDL2_image..."
        if make -j$(nproc); then
          echo "✓ SDL2_image build successful"
        else
          echo "✗ SDL2_image build failed"
          echo "Build output:"
          make 2>&1 | tail -20
          exit 1
        fi
        
        echo "Installing SDL2_image..."
        if sudo make install; then
          echo "✓ SDL2_image installation successful"
        else
          echo "✗ SDL2_image installation failed"
          exit 1
        fi
        
        # Verify the installation
        if [ -f "$SDL2_IMAGE_PREFIX/lib/libSDL2_image.a" ]; then
          echo "✓ Custom libSDL2_image.a found at $SDL2_IMAGE_PREFIX/lib/"
          ls -la "$SDL2_IMAGE_PREFIX/lib/libSDL2_image.a"
        else
          echo "✗ Custom libSDL2_image.a NOT found at $SDL2_IMAGE_PREFIX/lib/"
          echo "Contents of $SDL2_IMAGE_PREFIX/lib/:"
          ls -la "$SDL2_IMAGE_PREFIX/lib/" || echo "Directory does not exist"
          exit 1
        fi
        
        # Check for header files
        echo "Checking for SDL_image.h header file:"
        find $SDL2_IMAGE_PREFIX -name "SDL_image.h" 2>/dev/null || echo "SDL_image.h not found"
        echo "Contents of $SDL2_IMAGE_PREFIX/include/:"
        find $SDL2_IMAGE_PREFIX/include -type f 2>/dev/null || echo "No include files found"
        echo "Full directory structure of $SDL2_IMAGE_PREFIX:"
        find $SDL2_IMAGE_PREFIX -type f 2>/dev/null | head -20 || echo "No files found"
        
        # Set environment variables for the build
        echo "SDL2_IMAGE_PREFIX=$SDL2_IMAGE_PREFIX" >> $GITHUB_ENV
        echo "SDL2_IMAGE_LIB=$SDL2_IMAGE_PREFIX/lib" >> $GITHUB_ENV
        # Find the actual include directory
        SDL2_IMAGE_INCLUDE_DIR=$(find $SDL2_IMAGE_PREFIX -name "SDL_image.h" -type f 2>/dev/null | head -1 | xargs dirname)
        if [ -n "$SDL2_IMAGE_INCLUDE_DIR" ]; then
          echo "SDL2_IMAGE_INCLUDE=$SDL2_IMAGE_INCLUDE_DIR" >> $GITHUB_ENV
          echo "Found SDL_image.h at: $SDL2_IMAGE_INCLUDE_DIR"
        else
          echo "SDL2_IMAGE_INCLUDE=$SDL2_IMAGE_PREFIX/include/SDL2" >> $GITHUB_ENV
          echo "Using default include path: $SDL2_IMAGE_PREFIX/include/SDL2"
        fi
        
        echo "SDL2_image built with PNG support only to $SDL2_IMAGE_PREFIX"
        
    - name: Debug SDL2 paths and libraries
      run: |
        echo "Homebrew prefix: $(brew --prefix)"
        echo "Custom SDL2_image prefix: $SDL2_IMAGE_PREFIX"
        echo "SDL2 include path: $(brew --prefix sdl2)/include"
        echo "Custom SDL2_image include path: $SDL2_IMAGE_INCLUDE"
        echo "Checking for static libraries:"
        ls -la $(brew --prefix)/lib/libSDL2* || echo "No SDL2 libraries found"
        echo "Checking for PNG support libraries:"
        # Check libpng.a
        if [ -f "$(brew --prefix)/lib/libpng.a" ]; then
          echo "  ✓ libpng.a found at $(brew --prefix)/lib/libpng.a"
        else
          echo "  ✗ libpng.a missing from $(brew --prefix)/lib/"
        fi
        # Check libz.a in keg-only location
        if [ -f "$(brew --prefix zlib)/lib/libz.a" ]; then
          echo "  ✓ libz.a found at $(brew --prefix zlib)/lib/libz.a"
        else
          echo "  ✗ libz.a missing from $(brew --prefix zlib)/lib/"
          echo "    → Checking alternative locations..."
          if [ -f "/usr/lib/libz.a" ]; then
            echo "    → Found at /usr/lib/libz.a"
          elif [ -f "/usr/local/lib/libz.a" ]; then
            echo "    → Found at /usr/local/lib/libz.a"
          else
            echo "    → Not found anywhere"
          fi
        fi
        echo "All .a files in Homebrew lib directory:"
        find $(brew --prefix)/lib -name "*.a" 2>/dev/null | grep -E "(png|z\.a)" || echo "No matching .a files found"
        echo "Checking Homebrew SDL2_image installation:"
        ls -la $(brew --prefix)/lib/libSDL2_image* || echo "No Homebrew SDL2_image libraries found"
        echo "Checking custom SDL2_image installation:"
        ls -la $SDL2_IMAGE_LIB/libSDL2_image* || echo "No custom SDL2_image libraries found"
        echo "Checking for header files:"
        find $(brew --prefix) -name "SDL.h" 2>/dev/null || echo "SDL.h not found"
        find $SDL2_IMAGE_PREFIX -name "SDL_image.h" 2>/dev/null || echo "Custom SDL_image.h not found"
        find $(brew --prefix) -name "SDL_image.h" 2>/dev/null || echo "Homebrew SDL_image.h not found"
        
    - name: Build for macOS
      run: |
        # Try full static build first
        if make -f Makefile.macos; then
          echo "✓ Full static build successful"
          mv game game-macos
        else
          echo "⚠ Full static build failed, trying minimal build..."
          if make -f Makefile.macos minimal; then
            echo "✓ Minimal static build successful"
            mv game-minimal game-macos
          else
            echo "✗ Both builds failed"
            exit 1
          fi
        fi
        chmod +x game-macos
        
    - name: Verify macOS build
      run: |
        echo "Checking linked libraries in executable:"
        otool -L game-macos || echo "otool failed"
        echo "Verifying no SDL2 dylib dependencies (should be statically linked):"
        otool -L game-macos | grep -i sdl || echo "✓ No SDL2 dylib dependencies found (static linking successful)"
        echo "Checking if executable runs (headless test):"
        SDL_VIDEODRIVER=dummy timeout 5s ./game-macos || echo "Game test completed (timeout or exit is normal)"
        
    - name: Create macOS zip
      run: |
        # Include the statically linked executable and assets folder
        zip -r game-macos.zip game-macos assets/
        echo "Contents of zip file:"
        unzip -l game-macos.zip
        
    - name: Upload macOS build
      uses: actions/upload-artifact@v4
      with:
        name: game-macos
        path: game-macos.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install SDL2 dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev
        
    - name: Build for Linux
      run: |
        make -f Makefile.linux
        mv game game-linux
        chmod +x game-linux
        
    - name: Create Linux zip
      run: |
        zip -r game-linux.zip game-linux assets/
        
    - name: Upload Linux build
      uses: actions/upload-artifact@v4
      with:
        name: game-linux
        path: game-linux.zip

  build-web:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Emscripten
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install latest
        ./emsdk activate latest
        echo "EMSDK_PATH=$PWD" >> $GITHUB_ENV
        echo "$PWD" >> $GITHUB_PATH
        
    - name: Verify Emscripten installation
      run: |
        source $EMSDK_PATH/emsdk_env.sh
        echo "Emscripten version:"
        emcc --version
        echo "Emscripten environment:"
        which emcc
        which emcmake
        which emmake
        
    - name: Build for WebAssembly
      run: |
        source $EMSDK_PATH/emsdk_env.sh
        mkdir build-web
        cd build-web
        echo "Configuring with Emscripten..."
        emcmake cmake .. -DCMAKE_BUILD_TYPE=Release
        echo "Building with Emscripten..."
        emmake make -j$(nproc)
        
    - name: Verify WebAssembly build
      run: |
        source $EMSDK_PATH/emsdk_env.sh
        cd build-web
        ls -la
        echo "Checking if index.html exists:"
        test -f index.html && echo "✓ index.html found" || echo "✗ index.html missing"
        echo "Checking if game.js exists:"
        test -f game.js && echo "✓ game.js found" || echo "✗ game.js missing"
        echo "Checking if game.wasm exists:"
        test -f game.wasm && echo "✓ game.wasm found" || echo "✗ game.wasm missing"
        echo "Checking if assets directory exists:"
        test -d assets && echo "✓ assets directory found" || echo "✗ assets directory missing"
        
    - name: Create WebAssembly zip
      run: |
        cd build-web
        # Create zip with all available files
        zip -r game-web.zip . -x "*.zip"
        
    - name: Upload WebAssembly build
      uses: actions/upload-artifact@v4
      with:
        name: game-web
        path: build-web/game-web.zip
    
    - name: Copy GitHub Pages config files
      run: |
        cd build-web
        # Copy .nojekyll if it exists
        if [ -f ../.nojekyll ]; then
          cp ../.nojekyll .
          echo "✓ Copied .nojekyll"
        else
          echo "ℹ .nojekyll not found, creating empty one"
          touch .nojekyll
        fi
        # Copy _headers if it exists
        if [ -f ../_headers ]; then
          cp ../_headers .
          echo "✓ Copied _headers"
        else
          echo "ℹ _headers not found, creating basic one"
          echo "Cross-Origin-Embedder-Policy: require-corp" > _headers
          echo "Cross-Origin-Opener-Policy: same-origin" >> _headers
        fi
    
    - name: Upload WebAssembly for Pages
      uses: actions/upload-artifact@v4
      with:
        name: game-web-pages
        path: build-web/

  deploy-pages:
    needs: [build-web]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
    - name: Download web build artifact
      uses: actions/download-artifact@v4
      with:
        name: game-web-pages
        path: ./build-web
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        enablement: true
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: build-web
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Log deployment URL
      run: |
        echo "🚀 GitHub Pages deployment completed!"
        echo "📍 Your game is now live at:"
        echo "   https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        echo ""
        echo "🎮 Game features:"
        echo "   • Cross-platform WebAssembly game"
        echo "   • Works on desktop and mobile"
        echo "   • No CORS issues - served over HTTPS"
        echo ""
        echo "📱 Controls:"
        echo "   • Desktop: WASD to move, J to attack, ESC to quit"
        echo "   • Mobile: Touch and drag to move, tap to attack"

  create-release:
    needs: [build-windows, build-macos, build-linux, build-web]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: write
    steps:
    - name: Download Windows build
      uses: actions/download-artifact@v4
      with:
        name: game-windows
        path: ./releases/windows/
        
    - name: Download macOS build
      uses: actions/download-artifact@v4
      with:
        name: game-macos
        path: ./releases/macos/
        
    - name: Download Linux build
      uses: actions/download-artifact@v4
      with:
        name: game-linux
        path: ./releases/linux/
        
    - name: Download WebAssembly build
      uses: actions/download-artifact@v4
      with:
        name: game-web
        path: ./releases/web/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Codex Game v${{ github.run_number }}
        body: |
          ## Codex Game Release v${{ github.run_number }}
          
          Cross-platform builds for Windows, macOS, and Linux.
          
          ### Downloads:
          - **Windows**: `game.exe` - Run directly on Windows
          - **macOS**: `game-macos.zip` - Extract and run `./game-macos`
          - **Linux**: `game-linux.zip` - Extract and run `./game-linux`
          - **Web**: `game-web.zip` - Extract and open game.html in any modern web browser (works on mobile too!)
          
          ### Controls:
          - **Desktop**: WASD to move, J to attack, ESC to quit
          - **Mobile/Web**: Touch and drag to move, tap to attack
          
          ### Game Features:
          - Dynamic enemy spawning and leveling
          - Shard collection system
          - Magnet power-ups
          - Cross-platform compatibility (Desktop + Web)
        files: |
          ./releases/windows/game.exe
          ./releases/macos/game-macos.zip
          ./releases/linux/game-linux.zip
          ./releases/web/game-web.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
