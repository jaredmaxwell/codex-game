name: Build Game

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Setup vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
    
    - name: Install dependencies
      run: |
        .\vcpkg\vcpkg.exe install --triplet=x64-windows
    
    - name: Build with CMake
      run: |
        cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows
        cmake --build build --config Release
        
    - name: Upload Windows build
      uses: actions/upload-artifact@v4
      with:
        name: game-windows
        path: build/Release/game.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install SDL2 dependencies
      run: |
        brew install sdl2 sdl2_ttf sdl2_image
        
    - name: Debug SDL2 paths
      run: |
        echo "Homebrew prefix: $(brew --prefix)"
        echo "SDL2 include path: $(brew --prefix sdl2)/include"
        echo "SDL2_ttf include path: $(brew --prefix sdl2_ttf)/include"
        echo "SDL2_image include path: $(brew --prefix sdl2_image)/include"
        find $(brew --prefix) -name "SDL.h" 2>/dev/null || echo "SDL.h not found"
        find $(brew --prefix) -name "SDL_ttf.h" 2>/dev/null || echo "SDL_ttf.h not found"
        find $(brew --prefix) -name "SDL_image.h" 2>/dev/null || echo "SDL_image.h not found"
        
    - name: Build for macOS
      run: |
        make -f Makefile.macos
        mv game game-macos
        chmod +x game-macos
        
    - name: Create macOS zip
      run: |
        zip game-macos.zip game-macos
        
    - name: Upload macOS build
      uses: actions/upload-artifact@v4
      with:
        name: game-macos
        path: game-macos.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install SDL2 dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev
        
    - name: Build for Linux
      run: |
        make -f Makefile.linux
        mv game game-linux
        chmod +x game-linux
        
    - name: Create Linux zip
      run: |
        zip game-linux.zip game-linux
        
    - name: Upload Linux build
      uses: actions/upload-artifact@v4
      with:
        name: game-linux
        path: game-linux.zip

  build-web:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Emscripten
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install latest
        ./emsdk activate latest
        echo "EMSDK_PATH=$PWD" >> $GITHUB_ENV
        echo "$PWD" >> $GITHUB_PATH
        
    - name: Build for WebAssembly
      run: |
        source $EMSDK_PATH/emsdk_env.sh
        mkdir build-web
        cd build-web
        emcmake cmake .. -DCMAKE_BUILD_TYPE=Release
        emmake make -j$(nproc)
        
    - name: Create WebAssembly zip
      run: |
        cd build-web
        zip -r game-web.zip index.html game.js game.wasm assets/
        
    - name: Upload WebAssembly build
      uses: actions/upload-artifact@v4
      with:
        name: game-web
        path: build-web/game-web.zip
    
    - name: Upload WebAssembly for Pages
      uses: actions/upload-artifact@v4
      with:
        name: game-web-pages
        path: build-web/

  deploy-pages:
    needs: [build-web]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
    - name: Download web build artifact
      uses: actions/download-artifact@v4
      with:
        name: game-web-pages
        path: ./build-web
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        enablement: true
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: build-web
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Log deployment URL
      run: |
        echo "üöÄ GitHub Pages deployment completed!"
        echo "üìç Your game is now live at:"
        echo "   https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        echo ""
        echo "üéÆ Game features:"
        echo "   ‚Ä¢ Cross-platform WebAssembly game"
        echo "   ‚Ä¢ Works on desktop and mobile"
        echo "   ‚Ä¢ No CORS issues - served over HTTPS"
        echo ""
        echo "üì± Controls:"
        echo "   ‚Ä¢ Desktop: WASD to move, J to attack, ESC to quit"
        echo "   ‚Ä¢ Mobile: Touch and drag to move, tap to attack"

  create-release:
    needs: [build-windows, build-macos, build-linux, build-web]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: write
    steps:
    - name: Download Windows build
      uses: actions/download-artifact@v4
      with:
        name: game-windows
        path: ./releases/windows/
        
    - name: Download macOS build
      uses: actions/download-artifact@v4
      with:
        name: game-macos
        path: ./releases/macos/
        
    - name: Download Linux build
      uses: actions/download-artifact@v4
      with:
        name: game-linux
        path: ./releases/linux/
        
    - name: Download WebAssembly build
      uses: actions/download-artifact@v4
      with:
        name: game-web
        path: ./releases/web/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Codex Game v${{ github.run_number }}
        body: |
          ## Codex Game Release v${{ github.run_number }}
          
          Cross-platform builds for Windows, macOS, and Linux.
          
          ### Downloads:
          - **Windows**: `game.exe` - Run directly on Windows
          - **macOS**: `game-macos.zip` - Extract and run `./game-macos`
          - **Linux**: `game-linux.zip` - Extract and run `./game-linux`
          - **Web**: `game-web.zip` - Extract and open game.html in any modern web browser (works on mobile too!)
          
          ### Controls:
          - **Desktop**: WASD to move, J to attack, ESC to quit
          - **Mobile/Web**: Touch and drag to move, tap to attack
          
          ### Game Features:
          - Dynamic enemy spawning and leveling
          - Shard collection system
          - Magnet power-ups
          - Cross-platform compatibility (Desktop + Web)
        files: |
          ./releases/windows/game.exe
          ./releases/macos/game-macos.zip
          ./releases/linux/game-linux.zip
          ./releases/web/game-web.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
