# macOS Makefile
CXX = clang++
HOMEBREW_PREFIX = $(shell brew --prefix)
CXXFLAGS = -std=c++17 -I$(HOMEBREW_PREFIX)/include/SDL2 -I$(HOMEBREW_PREFIX)/include
SRC = src/main.cpp src/bitmap_font.cpp

# Static linking only - embeds SDL2 into the executable for distribution
# PNG-only build - much simpler and more reliable
IMAGE_LIBS = $(HOMEBREW_PREFIX)/lib/libSDL2.a
# Use custom-built SDL2_image with PNG support only (if available)
ifdef SDL2_IMAGE_LIB
    IMAGE_LIBS += $(SDL2_IMAGE_LIB)/libSDL2_image.a
    CXXFLAGS += -I$(SDL2_IMAGE_INCLUDE)
else
    # Fallback to Homebrew SDL2_image if custom build not available
    IMAGE_LIBS += $(HOMEBREW_PREFIX)/lib/libSDL2_image.a
endif
# PNG support library
IMAGE_LIBS += $(HOMEBREW_PREFIX)/lib/libpng.a
# Compression library for PNG
ifneq ($(wildcard $(HOMEBREW_PREFIX)/lib/libz.a),)
    IMAGE_LIBS += $(HOMEBREW_PREFIX)/lib/libz.a
else ifneq ($(wildcard /usr/lib/libz.a),)
    IMAGE_LIBS += /usr/lib/libz.a
endif
LDFLAGS = -L$(HOMEBREW_PREFIX)/lib -L/usr/local/lib -L/opt/homebrew/lib $(IMAGE_LIBS) -framework Cocoa -framework IOKit -framework CoreFoundation -framework CoreVideo -framework CoreAudio -framework AudioToolbox -framework CoreHaptics -framework GameController -framework CoreServices -framework Metal -framework Foundation -framework QuartzCore -framework ForceFeedback -framework Carbon -framework ImageIO -framework CoreGraphics -framework ApplicationServices -framework Security -framework SystemConfiguration -framework AppKit
TARGET = game
MESSAGE = "Building with static SDL2 linking (distribution-ready)"

all: $(TARGET)

# Fallback build with minimal dependencies (if full static build fails)
minimal: $(SRC)
	@echo "Building with minimal static linking (fallback mode)"
	@echo "Using only SDL2 and PNG support..."
	@if [ -n "$(SDL2_IMAGE_LIB)" ]; then \
		echo "Using custom SDL2_image from $(SDL2_IMAGE_LIB)"; \
		$(CXX) $(CXXFLAGS) -I$(SDL2_IMAGE_INCLUDE) -o game-minimal $(SRC) \
			$(HOMEBREW_PREFIX)/lib/libSDL2.a \
			$(SDL2_IMAGE_LIB)/libSDL2_image.a \
			$(HOMEBREW_PREFIX)/lib/libpng.a \
			-framework Cocoa -framework IOKit -framework CoreFoundation \
			-framework CoreVideo -framework CoreAudio -framework AudioToolbox \
			-framework CoreHaptics -framework GameController -framework CoreServices \
			-framework Metal -framework Foundation -framework QuartzCore \
			-framework ForceFeedback -framework Carbon -framework ImageIO \
			-framework CoreGraphics -framework ApplicationServices \
			-framework Security -framework SystemConfiguration -framework AppKit; \
	else \
		echo "Using Homebrew SDL2_image"; \
		$(CXX) $(CXXFLAGS) -o game-minimal $(SRC) \
			$(HOMEBREW_PREFIX)/lib/libSDL2.a \
			$(HOMEBREW_PREFIX)/lib/libSDL2_image.a \
			$(HOMEBREW_PREFIX)/lib/libpng.a \
			-framework Cocoa -framework IOKit -framework CoreFoundation \
			-framework CoreVideo -framework CoreAudio -framework AudioToolbox \
			-framework CoreHaptics -framework GameController -framework CoreServices \
			-framework Metal -framework Foundation -framework QuartzCore \
			-framework ForceFeedback -framework Carbon -framework ImageIO \
			-framework CoreGraphics -framework ApplicationServices \
			-framework Security -framework SystemConfiguration -framework AppKit; \
	fi
	@echo "Minimal build complete!"

$(TARGET): $(SRC)
	@echo $(MESSAGE)
	@echo "Checking for static SDL2 libraries..."
	@test -f $(HOMEBREW_PREFIX)/lib/libSDL2.a || (echo "Error: libSDL2.a not found. Install with: brew install sdl2" && exit 1)
	@if [ -n "$(SDL2_IMAGE_LIB)" ]; then \
		echo "Using custom SDL2_image from $(SDL2_IMAGE_LIB)"; \
		test -f $(SDL2_IMAGE_LIB)/libSDL2_image.a || (echo "Error: Custom libSDL2_image.a not found at $(SDL2_IMAGE_LIB)" && exit 1); \
	else \
		echo "Using Homebrew SDL2_image"; \
		test -f $(HOMEBREW_PREFIX)/lib/libSDL2_image.a || (echo "Error: libSDL2_image.a not found. Install with: brew install sdl2_image" && exit 1); \
	fi
	@echo "Checking for PNG support libraries..."
	@echo "Available libraries:"
	@for lib in libpng.a libz.a; do \
		if [ -f "$(HOMEBREW_PREFIX)/lib/$$lib" ]; then \
			echo "  ✓ $$lib"; \
		else \
			echo "  ✗ $$lib (not found)"; \
		fi; \
	done
	@echo "Checking system libraries:"
	@for lib in /usr/lib/libz.a; do \
		if [ -f "$$lib" ]; then \
			echo "  ✓ $$lib"; \
		else \
			echo "  ✗ $$lib (not found)"; \
		fi; \
	done
	@echo "Linking with available libraries..."
	$(CXX) $(CXXFLAGS) -o $@ $(SRC) $(LDFLAGS)
	@echo "Build complete!"

clean:
	rm -f game

.PHONY: all clean minimal
