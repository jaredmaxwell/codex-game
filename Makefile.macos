# macOS Makefile
CXX = clang++
HOMEBREW_PREFIX = $(shell brew --prefix)
CXXFLAGS = -std=c++17 -I$(HOMEBREW_PREFIX)/include/SDL2 -I$(HOMEBREW_PREFIX)/include
SRC = src/main.cpp src/bitmap_font.cpp src/game.cpp src/player.cpp

# Static linking only - embeds SDL2 into the executable for distribution
# PNG-only build - much simpler and more reliable
IMAGE_LIBS = $(HOMEBREW_PREFIX)/lib/libSDL2.a
# Use custom-built SDL2_image with PNG support only (if available)
ifdef SDL2_IMAGE_LIB
    IMAGE_LIBS += $(SDL2_IMAGE_LIB)/libSDL2_image.a
    CXXFLAGS += -I$(SDL2_IMAGE_INCLUDE)
else
    # Fallback to Homebrew SDL2_image if custom build not available
    IMAGE_LIBS += $(HOMEBREW_PREFIX)/lib/libSDL2_image.a
endif
# PNG support library
IMAGE_LIBS += $(HOMEBREW_PREFIX)/lib/libpng.a
# Compression library for PNG (keg-only package)
ifdef ZLIB_LIB
    # Use environment variable if set (from GitHub Actions)
    ifneq ($(wildcard $(ZLIB_LIB)/libz.a),)
        IMAGE_LIBS += $(ZLIB_LIB)/libz.a
    else
        $(warning libz.a not found at $(ZLIB_LIB)/libz.a)
    endif
else
    # Fallback to standard locations
    ifneq ($(wildcard $(HOMEBREW_PREFIX)/lib/libz.a),)
        IMAGE_LIBS += $(HOMEBREW_PREFIX)/lib/libz.a
    else ifneq ($(wildcard /usr/lib/libz.a),)
        IMAGE_LIBS += /usr/lib/libz.a
    else ifneq ($(wildcard /usr/local/lib/libz.a),)
        IMAGE_LIBS += /usr/local/lib/libz.a
    else
        $(warning libz.a not found - PNG compression may not work properly)
        $(warning Continuing without libz.a - this may cause linking errors)
    endif
endif
LDFLAGS = -L$(HOMEBREW_PREFIX)/lib -L/usr/local/lib -L/opt/homebrew/lib $(IMAGE_LIBS) -framework Cocoa -framework IOKit -framework CoreFoundation -framework CoreVideo -framework CoreAudio -framework AudioToolbox -framework CoreHaptics -framework GameController -framework CoreServices -framework Metal -framework Foundation -framework QuartzCore -framework ForceFeedback -framework Carbon -framework ImageIO -framework CoreGraphics -framework ApplicationServices -framework Security -framework SystemConfiguration -framework AppKit
TARGET = game
MESSAGE = "Building with static SDL2 linking (distribution-ready)"

all: $(TARGET)

# Fallback build with minimal dependencies (if full static build fails)
minimal: $(SRC)
	@echo "Building with minimal static linking (fallback mode)"
	@echo "Using only SDL2 and PNG support..."
	@if [ -n "$(SDL2_IMAGE_LIB)" ] && [ -f "$(SDL2_IMAGE_LIB)/libSDL2_image.a" ]; then \
		echo "Using custom SDL2_image from $(SDL2_IMAGE_LIB)"; \
		$(CXX) $(CXXFLAGS) -I$(SDL2_IMAGE_INCLUDE) -o game-minimal $(SRC) \
			$(HOMEBREW_PREFIX)/lib/libSDL2.a \
			$(SDL2_IMAGE_LIB)/libSDL2_image.a \
			$(HOMEBREW_PREFIX)/lib/libpng.a \
			-framework Cocoa -framework IOKit -framework CoreFoundation \
			-framework CoreVideo -framework CoreAudio -framework AudioToolbox \
			-framework CoreHaptics -framework GameController -framework CoreServices \
			-framework Metal -framework Foundation -framework QuartzCore \
			-framework ForceFeedback -framework Carbon -framework ImageIO \
			-framework CoreGraphics -framework ApplicationServices \
			-framework Security -framework SystemConfiguration -framework AppKit; \
	else \
		echo "Error: Custom SDL2_image not found at $(SDL2_IMAGE_LIB)"; \
		echo "The custom PNG-only SDL2_image build must succeed for static linking to work."; \
		exit 1; \
	fi
	@echo "Minimal build complete!"

$(TARGET): $(SRC)
	@echo $(MESSAGE)
	@echo "Checking for static SDL2 libraries..."
	@test -f $(HOMEBREW_PREFIX)/lib/libSDL2.a || (echo "Error: libSDL2.a not found. Install with: brew install sdl2" && exit 1)
	@if [ -n "$(SDL2_IMAGE_LIB)" ] && [ -f "$(SDL2_IMAGE_LIB)/libSDL2_image.a" ]; then \
		echo "Using custom SDL2_image from $(SDL2_IMAGE_LIB)"; \
	else \
		echo "Error: Custom SDL2_image not found at $(SDL2_IMAGE_LIB)"; \
		echo "The custom PNG-only SDL2_image build must succeed for static linking to work."; \
		exit 1; \
	fi
	@echo "Checking for PNG support libraries..."
	@echo "Available libraries:"
	@if [ -f "$(HOMEBREW_PREFIX)/lib/libpng.a" ]; then \
		echo "  ✓ libpng.a"; \
	else \
		echo "  ✗ libpng.a (not found)"; \
	fi
	@if [ -n "$(ZLIB_LIB)" ] && [ -f "$(ZLIB_LIB)/libz.a" ]; then \
		echo "  ✓ libz.a (found at $(ZLIB_LIB)/libz.a)"; \
	elif [ -f "$(HOMEBREW_PREFIX)/lib/libz.a" ]; then \
		echo "  ✓ libz.a"; \
	elif [ -f "/usr/lib/libz.a" ]; then \
		echo "  ✓ libz.a (system)"; \
	else \
		echo "  ✗ libz.a (not found)"; \
	fi
	@echo "Linking with available libraries..."
	$(CXX) $(CXXFLAGS) -o $@ $(SRC) $(LDFLAGS)
	@echo "Build complete!"

clean:
	rm -f game

.PHONY: all clean minimal
